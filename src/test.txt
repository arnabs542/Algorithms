
    /*
     * Complete the function below.
     */

    /*
        For your reference:

        static class Node
    	{
    		Integer val;
    		Vector<Node> neighbours = new Vector<Node>(0);
    		Node(Integer _val)
    		{
    			val = _val;
    			neighbours.clear();
    		}
    	};
    */

    static Node build_other_graph(Node node) {
        Map<Integer, Node> visitedMap = new HashMap<>();
        Node newNode = new Node(node.val);
        visitedMap.put(node.val, newNode);
        dfs(node, visitedMap);
        return newNode;
	}

	static void dfs(Node src, Map<Integer, Node> visited) {
	    Node newSrc = visited.get(src.val);

	    for(Node dest : src.neighbours) {
	        Node newDest;
	        if(!visited.containsKey(dest.val)) {
	           newDest = new Node(dest.val);
	           visited.put(dest.val, newDest);
	           dfs(dest, visited);
	        } else {
	            newDest = visited.get(dest.val);
	        }
	        newDest.neighbours.add(newSrc);
	    }
	}

	static Node build_other_graphOrig(Node node)

	{
	    Queue<Node> q = new LinkedList<>();
	    Map<Integer, Node> map = new HashMap<>();

	    q.add(node);
	    map.put(node.val, new Node(node.val));

	    //just build map with just new copy nodes
	    while(!q.isEmpty()) {
	        Node curr = q.poll();

	        for(Node next : curr.neighbours) {
	            if(!map.containsKey(next.val)) {
	                q.add(next);
	                map.put(next.val, new Node(next.val));
	            }
	        }
	    }

	    //BFS round 2 to reverse edges
	    q.add(node);
	    Set<Integer> seen = new HashSet<>();
	    seen.add(node.val);
	    while(!q.isEmpty()) {
	        Node src = q.poll();
	        for(Node dest : src.neighbours) {
                Node newSrcNode = map.get(dest.val);
                Node newDestNode = map.get(src.val);
                newSrcNode.neighbours.add(newDestNode);
	            if(!seen.contains(dest.val)) {
	                q.add(dest);
	                seen.add(dest.val);
	            }
	        }
	    }

	    return map.get(node.val);

	}

