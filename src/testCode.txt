class AutocompleteSystem {

    TrieNode root = null;
    StringBuilder sofar = new StringBuilder();
    TrieNode current = null;
    public AutocompleteSystem(String[] sentences, int[] times) {
        root = new TrieNode();
        for(int i=0; i<sentences.length; i++) {
            addSentence(sentences[i], times[i], 0);
        }
        current = root;
    }

    public List<String> input(char c) {
        if(c == '#') {
            addSentence(sofar.toString(), 0, 1);
            sofar = new StringBuilder();
            current = root;
            return Collections.EMPTY_LIST;
        }
        sofar = sofar.append(c);
        current = current.children.get(c);
        List<PQNode> top3 = searchTop3(current, sofar.toString());

        List<String> result = new ArrayList<>();
        for(PQNode pqNode : top3) {
            result.add(pqNode.sentence);
        }
        if(result.isEmpty()) {
            current = root;
        }
        return result;
    }

    List<PQNode> searchTop3(TrieNode node, String sofar) {

        if(node == null) {
            return new ArrayList<PQNode>();
        }

        PriorityQueue<PQNode> pq = new PriorityQueue(new Comparator<PQNode>() {
           public int compare(PQNode a, PQNode b) {
               if(a.hotCount != b.hotCount)
                   return b.hotCount - a.hotCount;

               return a.sentence.compareTo(b.sentence);
           }
        });

         if(node.isEndOfWord) {
            pq.offer(new PQNode(node.hotCount, sofar));
         }

        for(Map.Entry<Character, TrieNode> entry : node.children.entrySet()) {
            char c = entry.getKey();
            TrieNode child = entry.getValue();
            List<PQNode> top3 = searchTop3(child, sofar + c);
            for(PQNode pqNode : top3) {
                pq.offer(pqNode);
            }
        }

        List<PQNode> result = new ArrayList<>();
        int i=0;
        while(i < 3 && !pq.isEmpty()) {
            result.add(pq.poll());
            i++;
        }
        return result;
    }

    void addSentence(String s, int times, int inputCnt) {
        TrieNode curr = root;
        int i = 0;

        while(i < s.length()) {
            char c = s.charAt(i);
            i++;
            if(curr.children.containsKey(c)) {
                curr = curr.children.get(c);
            } else {
                TrieNode node = new TrieNode();
                curr.children.put(c, node);
                curr = node;
            }
        }
        curr.isEndOfWord = true;
        curr.hotCount = curr.hotCount + times + inputCnt;
    }

    class PQNode {
        int hotCount;
        String sentence;
        PQNode(int cnt, String s) {
            hotCount = cnt;
            sentence = s;
        }
    }
    class TrieNode {
        Map<Character, TrieNode> children;
        boolean isEndOfWord = false;
        int hotCount = 0;
        TrieNode() {
            children = new HashMap<>();
        }
    }
}

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * List<String> param_1 = obj.input(c);
 */